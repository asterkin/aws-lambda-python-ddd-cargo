#!/usr/bin/env python3

import sys
from importlib import import_module

template = """
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: %s
Resources:
%s
"""

funcTemplate = """
    $NAME:
        Type: 'AWS::Serverless::Function'
        Properties:
            Handler: $NAME.lambda_handler
            Runtime: python3.6
            CodeUri: s3://$BUCKET/$NAME.zip
            Description: $DOC
            MemorySize: 128
            Timeout: 3
"""

outputTemplate = """
    $NAME:
        Description: $DOC
        Value: !GetAtt $NAME.Arn
        Export:
            Name: !Sub '${AWS::StackName}-$NAME'
"""

def resource(bucket, name, doc):
    return funcTemplate.replace('$BUCKET', bucket).replace('$NAME', name).replace('$DOC', doc)

def output(name, doc):
    return outputTemplate.replace('$NAME', name).replace('$DOC', doc)

def resources(service, functions):
    bucket = service.lower()
    resources = ''
    outputs = ''
    for name in functions:
        doc = import_module(name).__doc__
        resources += resource(bucket, name, doc)
        outputs += output(name, doc)
    return resources + '\nOutputs:\n' + outputs

def generateTemplate(service, functions):
    sm = import_module(service)
    print(template % (sm.__doc__, ''.join(map(lambda r: str(r), sm.resources())) + resources(service, functions)))

generateTemplate(sys.argv[1], sys.argv[2:])


