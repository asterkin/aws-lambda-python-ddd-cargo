#!/usr/bin/env python3

import sys
from importlib import import_module

template = """
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: %s
Resources:
%s
"""

funcTemplate = """
    $NAME:
        Type: 'AWS::Serverless::Function'
        Properties:
            Handler: $NAME.lambda_handler
            Runtime: python3.6
            CodeUri: ../dist/$NAME.zip
            Description: $DOC
            MemorySize: 128
            Timeout: 3
"""

envTemplate = """
            Environment:
                Variables:$VARIABLES
"""

envRefTemplate = """
                    $NAME: !Ref $NAME
"""

outputTemplate = """
    $NAME:
        Description: $DOC
        Value: !GetAtt $NAME.Arn
        Export:
            Name: !Sub '${AWS::StackName}-$NAME'
"""

policyTemplate = """
            Policies:
                - Version: '2012-10-17'
                  Statement:
                    - Effect: Allow
"""
resActionsTemplate = """
                      Action:$ACTIONS
                      Resource: !GetAtt $RESOURCE.Arn
"""
resActionTemplate = """
                        - '$ACTION'
"""



def resActions(ref):
    return resActionsTemplate.replace('$ACTIONS', ''.join(map(lambda a: resActionTemplate.replace('$ACTION', a), ref['ops']))).replace('$RESOURCE', ref['ref'])

def policies(refs):
    return policyTemplate + ''.join(map(lambda r: resActions(r), refs))

def environment(refs):
    return envTemplate.replace('$VARIABLES', ''.join(map(lambda r: envRefTemplate.replace('$NAME', r['ref']), refs)))

def references(refs):
    return policies(refs) + environment(refs)

def resource(name):
    mod = import_module(name)
    doc = mod.__doc__
    func = funcTemplate.replace('$NAME', name).replace('$DOC', doc)
    refs = references(mod.resources()) if 'resources' in mod.__dict__ else ''
    return (func + refs, doc)

def output(name, doc):
    return outputTemplate.replace('$NAME', name).replace('$DOC', doc)

def resources(service, functions):
    resources = ''
    outputs = ''
    for name in functions:
        (res, doc) = resource(name)
        resources += res
        outputs += output(name, doc)
    return resources + '\nOutputs:\n' + outputs

def generateTemplate(service, functions):
    sm = import_module(service)
    return (template % (sm.__doc__, ''.join(map(lambda r: str(r), sm.resources())) + resources(service, functions))).replace('\n\n','\n')

print(generateTemplate(sys.argv[1], sys.argv[2:]))


